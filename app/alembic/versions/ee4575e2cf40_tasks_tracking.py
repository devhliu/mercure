"""tasks tracking

Revision ID: ee4575e2cf40
Revises: 57724e1ea282
Create Date: 2022-02-24 20:11:56.419148

"""
from typing import Any, List
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from sqlalchemy.engine.reflection import Inspector

# revision identifiers, used by Alembic.
revision = "ee4575e2cf40"
down_revision = "57724e1ea282"
branch_labels = None
depends_on = None


tables: List[Any] = []


def create_table(table_name, *params) -> None:
    global tables
    if not tables:
        conn = op.get_bind()
        inspector = Inspector.from_engine(conn)
        tables = inspector.get_table_names()
    if table_name in tables:
        return
    op.create_table(table_name, *params)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    connection = op.get_bind()
    dialect = connection.dialect
    if dialect.name == "sqlite":
        jsonb = sa.Text() # type: ignore
    else:
        jsonb = postgresql.JSONB(astext_type=sa.Text()) # type: ignore
    create_table(
        "tasks",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("time", sa.DateTime(), nullable=True),
        sa.Column("series_uid", sa.String(), nullable=True),
        sa.Column("study_uid", sa.String(), nullable=True),
        sa.Column("data", jsonb, nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    if dialect.name == "sqlite":
        op.execute("ALTER TABLE dicom_series ADD COLUMN study_uid character varying NULL")
    else:
        op.execute("ALTER TABLE dicom_series ADD COLUMN IF NOT EXISTS study_uid character varying NULL")
    # op.add_column("dicom_series", sa.Column("study_uid", sa.String(), nullable=True))

    op.rename_table("series_events", "task_events")
    op.add_column("task_events", sa.Column("task_id", sa.String(), nullable=True))
    # op.drop_column('task_events', 'series_uid')
    if dialect.name == "sqlite":
        pass
    else:
        op.execute("ALTER SEQUENCE series_events_id_seq RENAME TO task_events_id_seq")
        op.execute("ALTER INDEX series_events_pkey RENAME TO task_events_pkey")
        op.create_foreign_key("task_events_task_fk", "task_events", "tasks", ["task_id"], ["id"])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("ALTER TABLE task_events DROP CONSTRAINT IF EXISTS task_events_task_fk")
    op.execute("ALTER SEQUENCE task_events_id_seq  RENAME TO series_events_id_seq")
    op.execute("ALTER INDEX task_events_pkey RENAME TO series_events_pkey")

    # op.drop_constraint("task_events_task_fk", "task_events", type_="foreignkey")  # type: ignore
    op.drop_column("task_events", "task_id")
    # op.drop_column("dicom_series", "study_uid")
    # op.drop_table("tasks")
    op.rename_table("task_events", "series_events")
    # ### end Alembic commands ###
